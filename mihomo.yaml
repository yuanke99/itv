# 订阅
proxy-providers:
  Airport1:
    url: "https://home.8465366.xyz/qq8465366"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    header:
      User-Agent:
      - "Clash"
      - "mihomo"
      - "Clash.meta"

# 节点信息
proxies:
  - {name: 直连, type: direct, udp: true}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.wechat.com"
    - "+.qpic.cn"
    - "+.qq.com"
    - "+.wechatapp.com"
    - "+.vivox.com"
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"

  default-nameserver:
    - 111.8.14.18
    - 211.142.211.124
  proxy-server-nameserver:
    - 111.8.14.18
    - 211.142.211.124
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 111.8.14.18
    - 211.142.211.124

# 出站策略
pr: &pr {type: select,  proxies: [🚀节点选择, ♻️自动选择, 🇭🇰香港节点, 🇨🇳台湾节点, 🇸🇬新加坡节点, 🇯🇵日本节点, 🇰🇷韩国节点, 🇺🇲美国节点, 🇵🇱Serv00, 🇵🇱Serv15, 🌐欧洲节点, 🌐HY2节点, 直连]}
proxy-groups:
  - {name: 🚀节点选择, type: select, include-all: true, proxies: [ ♻️自动选择, 🇭🇰香港节点, 🇨🇳台湾节点, 🇸🇬新加坡节点, 🇯🇵日本节点, 🇰🇷韩国节点, 🇺🇲美国节点, 🇵🇱Serv00, 🇵🇱Serv15, 🌐欧洲节点, 🌐HY2节点]}
  - {name: ♻️自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 📹YouTube, <<: *pr}
  - {name: 🤖ChatGPT, <<: *pr}
  - {name: 🎵TikTok, <<: *pr}
  - {name: 📲Telegram, <<: *pr}
  - {name: 🐟漏网之鱼, <<: *pr}
  - {name: 🎯全球直连, type: select, proxies: [直连, 🚀节点选择]}
  - {name: 🇭🇰香港节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(香港|HK|HKG|(?i)Hong))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇨🇳台湾节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇸🇬新加坡节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇸🇬|新加坡|坡|狮城|SG|(?i)Singapore))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇯🇵日本节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇯🇵|NRT|日本|东京|大阪|泉日|埼玉|JP|(?i)Japan))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇰🇷韩国节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇰🇷|ICN|首尔|韩国))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇺🇲美国节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇺🇲|SEA|西雅图|LAX|洛杉矶|SJC|圣何塞|US))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇨🇦加拿大, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇨🇦|温哥华|蒙特利尔|YYZ|YVR))^((?!(s14|s15|s16)).)*$"}
#  - {name: 🇦🇺澳大利亚, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(s14|s15|s16)).)*$"}
#  - {name: 🇷🇺俄罗斯, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(s14|s15|s16)).)*$"}
  - {name: 🇵🇱Serv00, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(s14|s16))^((?!(hy2|reality)).)*$"}
  - {name: 🇵🇱Serv15, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(s15))^((?!(hy2|reality)).)*$"}
  - {name: 🌐欧洲节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(FRA|法兰克福|MXP|米兰|MRS|马赛|CDG|巴黎))^((?!(s14|s15|s16)).)*$"}
  - {name: 🌐HY2节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)hy2"}
# 规则匹配
rules:
  - RULE-SET,private_domain,直连
  - RULE-SET,itv,直连
  - RULE-SET,localareanetwork,直连
  - RULE-SET,ChinaDomain,直连
  - RULE-SET,ai,🤖ChatGPT
  - RULE-SET,github_domain,🚀节点选择
  - RULE-SET,youtube_domain,📹YouTube
  - RULE-SET,google_domain,🚀节点选择
  - RULE-SET,google_ip,🚀节点选择,no-resolve
  - RULE-SET,onedrive_domain,直连
  - RULE-SET,microsoft_domain,直连
  - RULE-SET,tiktok_domain,🎵TikTok
  - RULE-SET,telegram_domain,📲Telegram
  - RULE-SET,telegram_ip,📲Telegram,no-resolve
  - RULE-SET,gfw_domain,🚀节点选择
  - RULE-SET,geolocation-!cn,🚀节点选择
  - RULE-SET,cn_ip,直连
  - MATCH,🐟漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  localareanetwork: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list"}
  itv: { <<: *class, url: "https://raw.githubusercontent.com/yuanke99/itv/refs/heads/main/itv.list"}
  ChinaDomain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ChinaDomain.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
